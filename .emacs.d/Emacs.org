#+title: GNU Emacs Config
#+author: Guilherme Monteiro de Oliveira
#+startup: showeverything
#+property: header-args :tangle ./init.el
#+options: toc:t

* Table of contents :toc:
- [[#lets-begin][Let's begin]]
  - [[#esc-quit-everything][ESC quit everything]]
  - [[#zoomin-and-zoomout][ZoomIn and ZoomOut]]
  - [[#backup-directory][Backup directory]]
  - [[#add-custom-lisp-files-into-the-path][Add custom lisp files into the path]]
- [[#theme-with-modus][Theme with modus]]
- [[#transparency][Transparency]]
- [[#fonts][Fonts]]
- [[#package-management-with-straightel][Package Management with Straight.el]]
- [[#setupel][Setup.el]]
  - [[#load-after--deffered-loading-][:load-after ( Deffered loading )]]
  - [[#disabled--stop-evaluating-the-body-][:disabled ( Stop evaluating the body )]]
  - [[#pkg--config-setupel-to-work-with-straightel-][:pkg ( Config Setup.el to work with Straight.el )]]
- [[#undo-tree][Undo tree]]
- [[#evil-mode][Evil mode]]
- [[#which-key][Which key]]
- [[#org-mode][Org mode]]
  - [[#blocks-templates][Blocks templates]]
  - [[#automatic-make-the-table-of-contents][Automatic make the table of contents]]
- [[#completition-system][Completition System]]
  - [[#save-minibuffer-history][Save minibuffer history]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
  - [[#orderless][Orderless]]
  - [[#corfu][Corfu]]
  - [[#company][Company]]
- [[#shells][Shells]]
  - [[#vterm][Vterm]]
  - [[#eshell][Eshell]]
- [[#languages][Languages]]
  - [[#language-server][Language Server]]
  - [[#haskell][Haskell]]
  - [[#rust][Rust]]
  - [[#cc][C/C++]]
  - [[#csharp][CSharp]]
  - [[#python][Python]]
  - [[#latex][LaTeX]]
  - [[#javascript-and-typescript][JavaScript and TypeScript]]
  - [[#-web-][" Web "]]
- [[#keybinds][Keybinds]]

* Let's begin
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)

(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)

(global-prettify-symbols-mode t)

(defalias 'yes-or-no-p 'y-or-n-p) ;; Turn 'yes' or 'no' question to 'y' or 'n'
#+end_src

** ESC quit everything
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** ZoomIn and ZoomOut
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

** Backup directory
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
#+end_src

** Add custom lisp files into the path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src

* Theme with modus
#+begin_src emacs-lisp
(setq modus-themes-mode-line '(borderless)
      modus-themes-bold-constructs t
      modus-themes-italic-constructs t
      modus-themes-headings '((t . (rainbow))))
(load-theme 'modus-vivendi t)
#+end_src

* Transparency
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 80))
#+end_src

* Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "FantasqueSansM Nerd Font Mono" :height 165)

(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
#+end_src

* Package Management with Straight.el
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

* Setup.el
[[https://www.emacswiki.org/emacs/SetupEl][Setup.el]] by [[https://ruzkuku.com][pkal]] provide a macro to ease repetitive configurtion patterns in Emacs, and is an alternative to =use-package=.
#+begin_src emacs-lisp
(straight-use-package '(setup :type git :host nil :repo "https://git.sr.ht/~pkal/setup"))
(require 'setup)
#+end_src

** :load-after ( Deffered loading )
#+begin_src emacs-lisp
(setup-define :load-after
  (lambda (&rest features)
    (let ((body `(require ',(setup-get 'feature))))
      (dolist (feature (nreverse features))
        (setq body `(with-eval-after-load ',feature ,body)))
      body))
:documentation "Load the current feature after FEATURES.")
#+end_src

** :disabled ( Stop evaluating the body )
#+begin_src emacs-lisp
(setup-define :disabled
  #'setup-quit
  :documentation "Unconditionally abort the evaluation of the current body.")
#+end_src

** :pkg ( Config Setup.el to work with Straight.el )
#+begin_src emacs-lisp
(setup-define :pkg
  (lambda (recipe)
    `(unless (straight-use-package ',recipe)
       ,(setup-quit)))
  :documentation
  "Install RECIPE with `straight-use-package'.
This macro can be used as HEAD, and will replace itself with the
first RECIPE's package."
  :repeatable t
  :shorthand (lambda (sexp)
               (let ((recipe (cadr sexp)))
                 (if (consp recipe)
                     (car recipe)
                   recipe))))
#+end_src

* Undo tree
#+begin_src emacs-lisp
(setup (:pkg undo-tree)
  (:option undo-tree-auto-save-history nil)
  (global-undo-tree-mode 1))
#+end_src

* Evil mode
#+begin_src emacs-lisp
(setup (:pkg evil)
  (:option evil-want-integration t
	   evil-want-C-u-scroll t
	   evil-want-C-i-jump nil
	   evil-want-keybinding nil
	   evil-split-window-right t
	   evil-split-window-bellow t
	   evil-undo-system 'undo-tree)
  (evil-mode)

  ;; Arrows keys are disabled in this config.
  (defun mo/dont-arrow ()
    (interactive)
    (message "Arrows keys are disabled hm."))
  (evil-global-set-key 'normal (kbd "<left>")  'mo/dont-arrow)
  (evil-global-set-key 'normal (kbd "<right>") 'mo/dont-arrow)
  (evil-global-set-key 'normal (kbd "<up>")    'mo/dont-arrow)
  (evil-global-set-key 'normal (kbd "<down>")  'mo/dont-arrow)

  (evil-global-set-key 'motion (kbd "<left>")  'mo/dont-arrow)
  (evil-global-set-key 'motion (kbd "<right>") 'mo/dont-arrow)
  (evil-global-set-key 'motion (kbd "<up>")    'mo/dont-arrow)
  (evil-global-set-key 'motion (kbd "<down>")  'mo/dont-arrow)

  ;; Center the screen and scroll ('zz' and scroll)
  (defun mo/center-scroll-up ()
    (interactive)
    (recenter)
    (evil-scroll-up 0))
  (defun mo/center-scroll-down ()
    (interactive)
    (recenter)
    (evil-scroll-down 0))
  (evil-global-set-key 'normal (kbd "C-u") 'mo/center-scroll-up)
  (evil-global-set-key 'normal (kbd "C-d") 'mo/center-scroll-down)

  (evil-global-set-key 'motion (kbd "C-u") 'mo/center-scroll-up)
  (evil-global-set-key 'motion (kbd "C-d") 'mo/center-scroll-down))

(setup (:pkg evil-collection)
  (:load-after evil)
  (evil-collection-init))
#+end_src

* Which key
#+begin_src emacs-lisp
(setup (:pkg which-key)
  (:option which-key-idle-delay 0.3)
  (which-key-mode))
#+end_src

* Org mode
#+begin_src emacs-lisp
(setup (:pkg org)
  (:also-load org-tempo)
  (:option org-edit-src-content-indentation 0)
  (:hook org-indent-mode toc-org-mode))
#+end_src

** Blocks templates
#+begin_src emacs-lisp
(setup org-tempo
  (:when-loaded (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))))
#+end_src

** Automatic make the table of contents
#+begin_src emacs-lisp
(setup (:pkg toc-org))
#+end_src

* Completition System
** Save minibuffer history
#+begin_src emacs-lisp
(setup savehist
  (:option history-lenght 25)
  (savehist-mode))
#+end_src

** Vertico
#+begin_src emacs-lisp
(defun mo/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
    (delete-word (- arg))))

(setup (:pkg vertico)
  (:with-map vertico-map
    (:bind "C-j" vertico-next
	   "C-k" vertico-previous))
  (:with-map minibuffer-local-map
    (:bind "M-h" mo/minibuffer-backward-kill))
  (:option vertico-cycle t
	   vertico-multiform-commands
	   '((describe-variable (:not posframe))
	     (describe-function (:not posframe))
	     (t posframe)))
  (vertico-mode)
  (vertico-multiform-mode))

(setup (:pkg vertico-posframe))
#+end_src

** Marginalia
#+begin_src emacs-lisp
(setup (:pkg marginalia)
  (marginalia-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
(setup (:pkg consult)
  (:global "C-s" consult-line
	   "C-M-l" consult-imenu)
  (:with-map minibuffer-local-map
    (:bind "C-r" consult-history)))
#+end_src

** Embark
#+begin_src emacs-lisp
(setup (:pkg embark)
  (:also-load embark-consult)
  (:global "C-S-a" embark-act)
  (:with-map minibuffer-local-map
    (:bind "C-d" embark-act)))

(setup (:pkg embark-consult))
#+end_src

** Orderless
#+begin_src emacs-lisp
(setup (:pkg orderless)
  (:require)
  (:option completion-styles '(orderless basic)
	   completion-category-defaults nil
	   completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Corfu
#+begin_src emacs-lisp
(setup (:pkg corfu)
  (:disabled)
  (:option corfu-cycle t
	   corfu-auto t
	   corfu-auto-prefix 2
	   corfu-auto-delay 0.0
	   corfu-styles '(orderless-fast basic))
  (:with-map corfu-map
    (:bind "C-j" corfu-next
	   "C-k" corfu-previous
	   "TAB" corfu-insert
	   "C-f" corfu-insert))
  (global-corfu-mode))
#+end_src

** Company
#+begin_src emacs-lisp
(setup (:pkg company)
  (:option company-minimum-prefix-length 2
	   company-idle-delay 0.0)
  (:with-map company-active-map
    (:bind "TAB" company-complete-selection))
  (global-company-mode))

(setup (:pkg company-box)
  (:hook-into company-mode))
#+end_src

* Shells
** Vterm
#+begin_src emacs-lisp
(setup (:pkg vterm)
  (:option shell-file-name "/bin/bash"
	   shell-max-scrollback 5000))
#+end_src

** Eshell
#+begin_src emacs-lisp
(setup eshell
  (:option eshell-history-size 5000
	   eshell-beffer-maximum-lines 5000
	   eshell-scroll-to-bottom-on-input t
	   eshell-highlight-prompt t))
#+end_src

* Languages
** Language Server
#+begin_src emacs-lisp
(setup (:pkg lsp-mode)
  (:option lsp-headerline-breadcrumb-enable nil))

(setup (:pkg lsp-ui))
#+end_src

** Haskell
Require haskell-language-server
#+begin_src emacs-lisp
(setup (:pkg haskell-mode)
  (:hook lsp)
  (:file-match "\\.hs\\'"))
#+end_src

** Rust
Require rust-analyzer server
#+begin_src emacs-lisp
(setup (:pkg rust-mode)
  (:hook lsp)
  (:file-match "\\.rs\\'"))
#+end_src

** C/C++
Require clang server
#+begin_src emacs-lisp
(setup c-mode
  (:hook lsp))

(setup c++-mode
  (:hook lsp))
#+end_src

** CSharp
Require omnisharp server
#+begin_src emacs-lisp
(setup csharp-mode
  (:hook lsp))
#+end_src

** Python
#+begin_src emacs-lisp
(setup (:pkg python-mode)
  (:hook lsp))

(setup (:pkg lsp-pyright))
#+end_src

** LaTeX
Require texlab server
#+begin_src emacs-lisp
(setup LaTex-mode
  (:hook lsp))

(setup (:pkg auctex))
#+end_src

** JavaScript and TypeScript
Require typescript server
#+begin_src emacs-lisp
(setup (:pkg js2-mode)
  (:hook lsp)
  (:file-match "\\.js\\'"))

(setup (:pkg rjsx-mode))

(setup (:pkg typescript-mode)
  (:hook lsp)
  (:file-match "\\.ts\\'"))

(setup (:pkg apheleia))
#+end_src

** " Web "
#+begin_src emacs-lisp
(setup (:pkg web-mode)
  (:hook lsp)
  (:file-match "\\.\\(html?\\|css\\|ejs\\|jsx\\|tsx\\)\\'"))

(setup (:pkg restclient))
#+end_src

* Keybinds
#+begin_src emacs-lisp
(setup (:pkg general)
  (general-evil-setup t)
  (general-create-definer mo/leader-keys
			  :states '(normal insert visual emacs)
			  :keymaps 'override
			  :prefix "SPC"
			  :global-prefix "M-SPC")

  (mo/leader-keys
    "SPC" '(M-x :wk "M-x")
    "."   '(find-file :wk "Find file")
    "M-u" '(universal-argument :wk "Universal argument"))

  (mo/leader-keys
    "E"  '(:ignore t :wk "Emacs")
    "Er" '((lambda () (interactive) (load-file user-init-file)) :wk "Reload Emacs"))

  (mo/leader-keys
    "h"  '(:ignore t :wk "Help")
    "hv" '(describe-variable :wk "Describe variable")
    "hf" '(describe-function :wk "Describe function")
    "ht" '(consult-theme :wk "Load theme"))

  (mo/leader-keys
    "b"  '(:ignore t :wk "Buffer")
    "bi" '(consult-buffer :wk "Ibuffer")
    "bk" '(kill-this-buffer :wk "Kill buffer")
    "br" '(revert-buffer :wk "Reload buffer"))
  
  (mo/leader-keys
    "w"  '(:ignore t :wk "Windows")
    "wc" '(evil-window-delete :wk "Close current windows")
    "ws" '(evil-window-split :wk "Horizontal split")
    "wv" '(evil-window-vsplit :wk "Vertical split")
    "wh" '(evil-window-left :wk "Window left")
    "wj" '(evil-window-down :wk "Window down")
    "wk" '(evil-window-up :wk "Window up")
    "wl" '(evil-window-right :wk "Window right")
    "ww" '(evil-window-next :wk "Window next"))

  (mo/leader-keys
    "p"  '(:ignore t :wk "Project")
    "pf" '(consult-fd :wk "Project file")
    "ps" '(consult-ripgrep :wk "Project search")
    "pg" '(consult-git-grep :wk "Project git search")
    "pi" '(consult-imenu :wk "Project imenu search")
    "pl" '(consult-line :wk "project line search"))

  (mo/leader-keys
    "f"  '(:ignore t :wk "File")
    "fe" '(dired :wk "Dired")
    "fC" '((lambda() (interactive) (find-file "~/.emacs.d/Emacs.org")) :wk "Open emacs config folder (.org)")))
#+end_src

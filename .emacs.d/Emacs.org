#+title: Gnu Emacs Config
#+author: Guilherme Monteiro de Oliveira
#+startup: showeverything
#+property: header-args :tangle ./init.el

* TABLE OF CONTENTS :toc:
- [[#initial-config][INITIAL CONFIG]]
  - [[#important-definitions][Important definitions]]
  - [[#fonts][Fonts]]
- [[#package-manager][PACKAGE MANAGER]]
  - [[#use-package][Use-package]]
- [[#evil-mode][EVIL MODE]]
- [[#org-mode][ORG MODE]]
  - [[#block-templates][Block Templates]]
  - [[#automatic-make-table-of-contents][Automatic make table of contents]]
  - [[#org-with-evil][Org with evil]]
- [[#ivy][IVY]]
  - [[#counsel][Counsel]]
- [[#flycheck][FLYCHECK]]
- [[#company][COMPANY]]
- [[#which-key][WHICH KEY]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#vterm][Vterm]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#language-server][Language Server]]
  - [[#golang][GoLang]]
  - [[#rust][Rust]]
  - [[#c-and-c][C and C++]]
  - [[#java][Java]]

* INITIAL CONFIG
** Important definitions
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)

  (global-display-line-numbers-mode 1)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 125)
  
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
#+end_src

* PACKAGE MANAGER
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* EVIL MODE
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-keybinding nil)
    (setq evil-split-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+end_src

* ORG MODE
#+begin_src emacs-lisp
  (use-package org
    :hook ((org-mode . org-indent-mode)
           (org-mode . (lambda() (setq evil-auto-indent nil))))
    :config
    (setq org-src-tab-acts-natively t)
    (setq org-src-preserve-indentation nil)
    (setq org-src-content-indentation 2))
#+end_src

** Block Templates
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Automatic make table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-enable))
#+end_src

** Org with evil
#+begin_src emacs-lisp
  (use-package evil-org
    :after (org evil)
    :hook (org-mode . evil-org-mode))
#+end_src

* IVY
#+begin_src emacs-lisp
  (use-package ivy
    :bind (("C-s" . swiper))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (ivy-mode))

  (use-package ivy-rich
    :init
    (ivy-rich-mode))
#+end_src

** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :bind (("M-x" . counsel-M-x))
    :config
    (counsel-mode))
#+end_src

* FLYCHECK
#+begin_src emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode))
#+end_src

* COMPANY
#+begin_src emacs-lisp
  (use-package company
    :custom
    (company-idle-delay .1)
    (company-minimum-prefix-length 1)
    (company-show-numbers t)
    (global-company-mode t))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
#+end_src

* WHICH KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
#+end_src

* SHELLS AND TERMINALS
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq shell-file-name "/bin/bash")
    (setq shell-max-scrollback 5000))
#+end_src

* LANGUAGE SUPPORT
** Language Server
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-lens-enable nil))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
#+end_src

** GoLang
#+begin_src emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    :hook (go-mode . lsp-deferred))
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    :hook (rust-mode . lsp-deferred))
#+end_src

** C and C++
#+begin_src emacs-lisp
  (add-hook 'c-mode 'lsp-deferred)
  (add-hook 'c++-mode 'lsp-deferred)
#+end_src

** Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :hook (java-mode . lsp-deferred))
#+end_src

#+title: Gnu Emacs Config
#+author: Guilherme Monteiro de Oliveira
#+startup: showeverything
#+property: header-args :tangle ./init.el

* TABLE OF CONTENTS :toc:
- [[#initial-config][INITIAL CONFIG]]
  - [[#geral-definitions][Geral definitions]]
  - [[#esc-quit-everything][ESC quit everything]]
  - [[#zoom-in-and-zoom-out][Zoom in and Zoom out]]
  - [[#backup-directory][Backup directory]]
  - [[#transparency][Transparency]]
  - [[#theme-with-modus][Theme with modus]]
  - [[#fonts][Fonts]]
- [[#package-manager][PACKAGE MANAGER]]
  - [[#use-package][Use-package]]
- [[#undo-tree][UNDO TREE]]
- [[#evil-mode][EVIL MODE]]
- [[#org-mode][ORG MODE]]
  - [[#block-templates][Block Templates]]
  - [[#automatic-make-table-of-contents][Automatic make table of contents]]
  - [[#org-with-evil][Org with evil]]
- [[#ivy][IVY]]
  - [[#counsel][Counsel]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#spell-check][SPELL CHECK]]
  - [[#ispell][Ispell]]
  - [[#flyspell][Flyspell]]
  - [[#flycheck][Flycheck]]
- [[#company][COMPANY]]
- [[#which-key][WHICH KEY]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#vterm][Vterm]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#language-server][Language Server]]
  - [[#golang][GoLang]]
  - [[#rust][Rust]]
  - [[#c-and-c][C and C++]]
  - [[#java][Java]]
  - [[#haskell][Haskell]]
  - [[#latex][LaTeX]]

* INITIAL CONFIG
** Geral definitions
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)

  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)

  (global-prettify-symbols-mode t)

  (defalias 'yes-or-no-p 'y-or-n-p) ;; Turn 'yes' or 'no' question to 'y' or 'n'
#+end_src

** ESC quit everything
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Zoom in and Zoom out
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

** Backup directory
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.Trash")))
#+end_src

** Transparency
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

** Theme with modus
#+begin_src emacs-lisp
  (setq modus-themes-mode-line '(borderless)
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-headings '((t . (rainbow))))
  (load-theme 'modus-vivendi t)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 125)
  
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
#+end_src

* PACKAGE MANAGER
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Use-package
#+begin_src emacs-lisp
  ;;(unless (package-installed-p 'use-package) ;; Install 'use-package' in non-linux plataforms
  ;;  (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* UNDO TREE
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (setq undo-tree-auto-save-history nil)
    (global-undo-tree-mode 1))
#+end_src

* EVIL MODE
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-keybinding nil)
    (setq evil-split-window-right t)
    (setq evil-split-window-below t)
    (evil-mode)
    (evil-set-undo-system 'undo-tree))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+end_src

* ORG MODE
#+begin_src emacs-lisp
  (use-package org
    :hook ((org-mode . org-indent-mode)
           (org-mode . (lambda() (setq evil-auto-indent nil))))
    :config
    (setq org-src-tab-acts-natively t
          org-src-preserve-indentation nil
          org-src-content-indentation 2))
#+end_src

** Block Templates
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Automatic make table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-enable))
#+end_src

** Org with evil
#+begin_src emacs-lisp
  (use-package evil-org
    :after (org evil)
    :hook (org-mode . evil-org-mode))
#+end_src

* IVY
#+begin_src emacs-lisp
  (use-package ivy
    :bind (("C-s" . swiper))
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "
          enable-recursive-minibuffers t)
    :hook (after-init . ivy-mode))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode))
#+end_src

** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :bind (("M-x" . counsel-M-x)))
#+end_src

* ALL THE ICONS
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :after dired
    :hook (dired-mode . (lambda() (all-the-icons-dired-mode t))))

  (use-package all-the-icons-ivy
    :init (all-the-icons-ivy-setup))

  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode t))
#+end_src

* RAINBOW MODE
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook ((org-mode prog-mode) . rainbow-mode))
#+end_src

* RAINBOW DELIMITERS
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* SPELL CHECK
** Ispell
#+begin_src emacs-lisp
  (require 'ispell)
  (setq ispell-dictionary "pt_BR")
  (setq ispell-program-name "/usr/bin/aspell")
#+end_src

** Flyspell
#+begin_src emacs-lisp
  (require 'flyspell)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :hook (after-init . global-flycheck-mode))
#+end_src

* COMPANY
#+begin_src emacs-lisp
  (use-package company
    :init
    (setq company-minimum-prefix-lenght 2
          company-require-match 'never
          company-show-numbers t
          company-global-modes
          '(not vterm-mode
                eshell-mode))
    :hook (after-init . global-company-mode))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
#+end_src

* WHICH KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
#+end_src

* SHELLS AND TERMINALS
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq shell-file-name "/bin/bash"
          shell-max-scrollback 5000))

  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
             '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                (display-buffer-reuse-window display-buffer-at-bottom)
                ;;(display-buffer-reuse-window display-buffer-in-direction)
                ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                ;;(direction . bottom)
                ;;(dedicated . t) ;dedicated is supported in emacs27
                (reusable-frames . visible)
                (window-height . 0.3))))
#+end_src

* LANGUAGE SUPPORT
** Language Server
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    (setq lsp-headerline-breadcrumb-enable nil
          lsp-lens-enable nil))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
#+end_src

** GoLang
#+begin_src emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    :hook (go-mode . lsp-deferred))
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    :hook (rust-mode . lsp-deferred))
#+end_src

** C and C++
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'lsp-deferred)
  (add-hook 'c++-mode-hook 'lsp-deferred)
#+end_src

** Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :hook (java-mode . lsp-deferred))
#+end_src

** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'")

  (use-package lsp-haskell
    :hook ((haskell-mode . lsp-deferred)
           (haskell-literate-mode . lsp-deferred)))
#+end_src

** LaTeX
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :hook (LaTeX-mode . (lambda () (setq TeX-view-program-selection '(((output-dvi has-no-display-manager)
                                                                       "dvi2tty")
                                                                      ((output-dvi style-pstricks)
                                                                       "dvips and gv")
                                                                      (output-dvi "xdvi")
                                                                      (output-pdf "Zathura")
                                                                      (output-html "xdg-open"))))))
  
  (use-package lsp-latex
    :hook (LaTeX-mode . lsp-deferred))
#+end_src
